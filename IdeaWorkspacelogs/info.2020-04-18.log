No active profile set, falling back to default profiles: default
Bootstrapping Spring Data JPA repositories in DEFAULT mode.
Finished Spring Data repository scanning in 373ms. Found 5 JPA repository interfaces.
Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
BeanFactory id=82d10982-30ea-3ca7-a687-948ffa1e04ba
Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@c8b75' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8087 (http)
Initializing ProtocolHandler ["http-nio-8087"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.33]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 23671 ms
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@86807a
HHH000204: Processing PersistenceUnitInfo [name: default]
HHH000412: Hibernate ORM core version 5.4.12.Final
HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
HikariPool-1 - Starting...
HikariPool-1 - Start completed.
HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Initialized JPA EntityManagerFactory for persistence unit 'default'
Unable to create an RSA verifier from verifierKey (ignoreable if using MAC)
spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning


Using generated security password: b44c1503-3e13-41e5-ba84-b752cb067137

Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@12ae973, org.springframework.security.web.context.SecurityContextPersistenceFilter@bf776c, org.springframework.security.web.header.HeaderWriterFilter@4dc999, org.springframework.security.web.authentication.logout.LogoutFilter@b03029, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@82882a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@ae1240, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@c2ef56, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@8b22b5, org.springframework.security.web.session.SessionManagementFilter@62f69a, org.springframework.security.web.access.ExceptionTranslationFilter@186e878, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@8e44fe]
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@180af04, org.springframework.security.web.context.SecurityContextPersistenceFilter@1f432ec, org.springframework.security.web.header.HeaderWriterFilter@199cd18, org.springframework.security.web.authentication.logout.LogoutFilter@e671ef, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@144e499, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@f204a4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@47940d, org.springframework.security.web.session.SessionManagementFilter@1d060be, org.springframework.security.web.access.ExceptionTranslationFilter@68b40, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1c6ab3f]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
Exposing 2 endpoint(s) beneath base path '/actuator'
Setting initial instance status as: STARTING
Initializing Eureka in region us-east-1
Using JSON encoding codec LegacyJacksonJson
Using JSON decoding codec LegacyJacksonJson
Using XML encoding codec XStreamXml
Using XML decoding codec XStreamXml
Resolving eureka endpoints via configuration
Disable delta property : false
Single vip registry refresh property : null
Force full registry fetch : false
Application is null : false
Registered Applications size is zero : true
Application version is -1: true
Getting all instance registry info from the eureka server
The response status is 200
Starting heartbeat executor: renew interval is: 30
InstanceInfoReplicator onDemand update allowed rate per min is 4
Discovery Client initialized at timestamp 1587195309592 with initial instances count: 6
Registering application PAPER-SERVICE with eureka with status UP
Saw local status change event StatusChangeEvent [timestamp=1587195309616, current=UP, previous=STARTING]
DiscoveryClient_PAPER-SERVICE/DESKTOP-IMI16LQ:paper-service:8087: registering service...
Starting ProtocolHandler ["http-nio-8087"]
DiscoveryClient_PAPER-SERVICE/DESKTOP-IMI16LQ:paper-service:8087 - registration status: 204
Tomcat started on port(s): 8087 (http) with context path '/paper-service'
Updating port to 8087
Started PaperServerApplication in 72.681 seconds (JVM running for 99.625)
Resolving eureka endpoints via configuration
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 739 ms
Resolving eureka endpoints via configuration
No active profile set, falling back to default profiles: default
Resolving eureka endpoints via configuration
Bootstrapping Spring Data JPA repositories in DEFAULT mode.
Finished Spring Data repository scanning in 215ms. Found 5 JPA repository interfaces.
Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
BeanFactory id=37867ff4-2018-34fb-ad07-5aef5062e222
Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1a3b078' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8089 (http)
Initializing ProtocolHandler ["http-nio-8089"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.33]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 19461 ms
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@1598450
HHH000204: Processing PersistenceUnitInfo [name: default]
HHH000412: Hibernate ORM core version 5.4.12.Final
HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
HikariPool-1 - Starting...
HikariPool-1 - Start completed.
HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Initialized JPA EntityManagerFactory for persistence unit 'default'
Unable to create an RSA verifier from verifierKey (ignoreable if using MAC)
spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning


Using generated security password: e536cfa9-12a0-40f2-9b42-432147612b5d

Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1cbeb54, org.springframework.security.web.context.SecurityContextPersistenceFilter@d2883a, org.springframework.security.web.header.HeaderWriterFilter@f649a7, org.springframework.security.web.authentication.logout.LogoutFilter@4a3430, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@1eff6a3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@ca2579, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1356666, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ae340, org.springframework.security.web.session.SessionManagementFilter@8986b6, org.springframework.security.web.access.ExceptionTranslationFilter@b194f5, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@14818e8]
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@167c091, org.springframework.security.web.context.SecurityContextPersistenceFilter@ce3f27, org.springframework.security.web.header.HeaderWriterFilter@d172c7, org.springframework.security.web.authentication.logout.LogoutFilter@1476fcf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@14cd187, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2d023, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@147cc1b, org.springframework.security.web.session.SessionManagementFilter@15ef673, org.springframework.security.web.access.ExceptionTranslationFilter@8afc2d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@f480c6]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
Exposing 2 endpoint(s) beneath base path '/actuator'
Setting initial instance status as: STARTING
Initializing Eureka in region us-east-1
Using JSON encoding codec LegacyJacksonJson
Using JSON decoding codec LegacyJacksonJson
Using XML encoding codec XStreamXml
Using XML decoding codec XStreamXml
Resolving eureka endpoints via configuration
Disable delta property : false
Single vip registry refresh property : null
Force full registry fetch : false
Application is null : false
Registered Applications size is zero : true
Application version is -1: true
Getting all instance registry info from the eureka server
The response status is 200
Starting heartbeat executor: renew interval is: 30
InstanceInfoReplicator onDemand update allowed rate per min is 4
Discovery Client initialized at timestamp 1587196251220 with initial instances count: 7
Registering application CONF-SERVICE with eureka with status UP
Saw local status change event StatusChangeEvent [timestamp=1587196251241, current=UP, previous=STARTING]
DiscoveryClient_CONF-SERVICE/DESKTOP-IMI16LQ:conf-service:8089: registering service...
Starting ProtocolHandler ["http-nio-8089"]
Tomcat started on port(s): 8089 (http) with context path '/conf-service'
Updating port to 8089
DiscoveryClient_CONF-SERVICE/DESKTOP-IMI16LQ:conf-service:8089 - registration status: 204
Started ConfServerApplication in 70.672 seconds (JVM running for 111.482)
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 19 ms
No active profile set, falling back to default profiles: default
Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
Endpoint ID 'hystrix.stream' contains invalid characters, please migrate to a valid format.
BeanFactory id=009c945d-0659-379a-b534-0dc4352d7136
Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@331b46' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8671 (http)
Initializing ProtocolHandler ["http-nio-8671"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.30]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 8937 ms
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@10c1f61
Unable to create an RSA verifier from verifierKey (ignoreable if using MAC)


Using generated security password: e5df692b-6429-42fb-a8c8-594724908bb9

Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1ab5ef7, org.springframework.security.web.context.SecurityContextPersistenceFilter@30f918, org.springframework.security.web.header.HeaderWriterFilter@1fdb8a4, org.springframework.security.web.authentication.logout.LogoutFilter@6427f7, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@531422, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@19831a4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1afb85, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@517704, org.springframework.security.web.session.SessionManagementFilter@a781f2, org.springframework.security.web.access.ExceptionTranslationFilter@15e98af, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1e004f1]
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@98f353, org.springframework.security.web.context.SecurityContextPersistenceFilter@21427, org.springframework.security.web.header.HeaderWriterFilter@9dc214, org.springframework.security.web.csrf.CsrfFilter@412556, org.springframework.security.web.authentication.logout.LogoutFilter@16edc75, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@12c345d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@17dc48e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1b35798, org.springframework.security.web.session.SessionManagementFilter@1be70d8, org.springframework.security.web.access.ExceptionTranslationFilter@12c9361, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@9f3887]
No URLs will be polled as dynamic configuration sources.
To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Initializing ExecutorService 'applicationTaskExecutor'
You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
Starting filter initializer
Exposing 2 endpoint(s) beneath base path '/actuator'
Setting initial instance status as: STARTING
Initializing Eureka in region us-east-1
Using JSON encoding codec LegacyJacksonJson
Using JSON decoding codec LegacyJacksonJson
Using XML encoding codec XStreamXml
Using XML decoding codec XStreamXml
Resolving eureka endpoints via configuration
Disable delta property : false
Single vip registry refresh property : null
Force full registry fetch : false
Application is null : false
Registered Applications size is zero : true
Application version is -1: true
Getting all instance registry info from the eureka server
The response status is 200
Starting heartbeat executor: renew interval is: 30
InstanceInfoReplicator onDemand update allowed rate per min is 4
Discovery Client initialized at timestamp 1587197542828 with initial instances count: 8
Registering application API-GATEWAY with eureka with status UP
Saw local status change event StatusChangeEvent [timestamp=1587197542839, current=UP, previous=STARTING]
DiscoveryClient_API-GATEWAY/DESKTOP-IMI16LQ:api-gateway:8671: registering service...
Starting ProtocolHandler ["http-nio-8671"]
Tomcat started on port(s): 8671 (http) with context path ''
Updating port to 8671
DiscoveryClient_API-GATEWAY/DESKTOP-IMI16LQ:api-gateway:8671 - registration status: 204
Started ApiGatewayApplication in 32.654 seconds (JVM running for 50.365)
Flipping property: auth-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Shutdown hook installed for: NFLoadBalancer-PingTimer-auth-service
Client: auth-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=auth-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: auth-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client auth-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=auth-service,current list of Servers=[DESKTOP-IMI16LQ:8085],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-IMI16LQ:8085;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@10b7fd5
Flipping property: user-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Shutdown hook installed for: NFLoadBalancer-PingTimer-user-service
Client: user-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=user-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: user-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client user-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=user-service,current list of Servers=[DESKTOP-IMI16LQ:8086],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-IMI16LQ:8086;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@f5d999
Flipping property: paper-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Shutdown hook installed for: NFLoadBalancer-PingTimer-paper-service
Client: paper-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=paper-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: paper-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client paper-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=paper-service,current list of Servers=[DESKTOP-IMI16LQ:8087],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-IMI16LQ:8087;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@cc27fd
Flipping property: conf-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Shutdown hook installed for: NFLoadBalancer-PingTimer-conf-service
Client: conf-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=conf-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: conf-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client conf-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=conf-service,current list of Servers=[DESKTOP-IMI16LQ:8089],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-IMI16LQ:8089;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@11db8b4
Flipping property: client-test1.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Shutdown hook installed for: NFLoadBalancer-PingTimer-client-test1
Client: client-test1 instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=client-test1,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
DynamicServerListLoadBalancer for client client-test1 initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=client-test1,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@106ebfb
Flipping property: consumer-test.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Shutdown hook installed for: NFLoadBalancer-PingTimer-consumer-test
Client: consumer-test instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=consumer-test,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
DynamicServerListLoadBalancer for client consumer-test initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=consumer-test,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@16454d
Flipping property: notice-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Shutdown hook installed for: NFLoadBalancer-PingTimer-notice-service
Client: notice-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=notice-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
Using serverListUpdater PollingServerListUpdater
Flipping property: notice-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
DynamicServerListLoadBalancer for client notice-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=notice-service,current list of Servers=[DESKTOP-IMI16LQ:8084],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-IMI16LQ:8084;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@c0437f
Flipping property: auth-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Flipping property: user-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Flipping property: paper-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Flipping property: conf-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Flipping property: notice-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 29 ms
Error during filtering
com.netflix.zuul.exception.ZuulException: 
	at org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter.findZuulException(SendErrorFilter.java:118)
	at org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter.run(SendErrorFilter.java:78)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.error(FilterProcessor.java:105)
	at com.netflix.zuul.ZuulRunner.error(ZuulRunner.java:112)
	at com.netflix.zuul.http.ZuulServlet.error(ZuulServlet.java:145)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:83)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:45)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Resolving eureka endpoints via configuration
